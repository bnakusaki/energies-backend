# -*- coding: utf-8 -*-
"""my_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ksThsPcIvziBIUhOxYAo2fAfHnrBgxQ1
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import joblib

def predict(value):
    # Load the dataset
    data = pd.read_csv('electricity_consumed1.csv')

    # Display the first few rows of the dataset
    print(data.head())

    # Check for missing values
    print(data.isnull().sum())

    # Fill or drop missing values (example: drop rows with missing values)
    data.dropna(inplace=True)

    # Separate features and target variable
    X = data[['ElectricityConsumed']]  # Only using 'electricity_consumed' as input
    y = data['Cost']  # Target variable

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Scale the features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # Initialize the Random Forest Regressor
    model = RandomForestRegressor(n_estimators=100, random_state=42)

    # Train the model
    model.fit(X_train_scaled, y_train)

    # Make predictions
    y_pred = model.predict(X_test_scaled)

    # Evaluate the model
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print(f'Mean Squared Error: {mse}')
    print(f'R-squared: {r2}')

    # # Optional: Plotting actual vs predicted values
    # plt.figure(figsize=(10, 6))
    # plt.scatter(y_test, y_pred, alpha=0.7)
    # plt.plot([y.min(), y.max()], [y.min(), y.max()], '--r')
    # plt.xlabel('Actual Unit Cost')
    # plt.ylabel('Predicted Unit Cost')
    # plt.title('Actual vs Predicted Unit Cost of Electricity')
    # plt.show()

    # Save the model
    joblib.dump(model, 'electricity_cost_model.pkl')

    # Load the model later for predictions
    loaded_model = joblib.load('electricity_cost_model.pkl')

    # Example electricity consumption value
    new_consumption = np.array([[value]])  # Replace 250 with the desired kWh value

    # Scale the input
    new_consumption_scaled = scaler.transform(new_consumption)

    # Predict the unit cost
    predicted_cost = loaded_model.predict(new_consumption_scaled)

    print(f'Predicted Unit Cost for {new_consumption[0][0]} kWh: {predicted_cost[0]}')
    return new_consumption[0][0]