# -*- coding: utf-8 -*-
"""my_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ksThsPcIvziBIUhOxYAo2fAfHnrBgxQ1
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import joblib

# Load and preprocess the data once
def load_and_preprocess_data(file_path='electricity_consumed1.csv'):
    # Load the dataset
    data = pd.read_csv(file_path)

    # Drop rows with missing values
    data.dropna(inplace=True)

    # Separate features and target variable
    X = data[['ElectricityConsumed']]
    y = data['Cost']

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Scale the features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    return X_train_scaled, X_test_scaled, y_train, y_test, scaler

# Train the model once and save it
def train_and_save_model(X_train, y_train, model_path='electricity_cost_model.pkl'):
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    joblib.dump(model, model_path)

# Load the model and make predictions
def load_model_and_predict(value, model_path='electricity_cost_model.pkl', scaler=None):
    loaded_model = joblib.load(model_path)

    # Scale the input
    new_consumption = np.array([[value]])
    new_consumption_scaled = scaler.transform(new_consumption)

    # Predict the unit cost
    predicted_cost = loaded_model.predict(new_consumption_scaled)
    
    print(f'Predicted Unit Cost for {value} kWh: {predicted_cost[0]}')
    return predicted_cost[0]

# Example usage:
def predict(value):
    # Load and preprocess data
    X_train_scaled, X_test_scaled, y_train, y_test, scaler = load_and_preprocess_data()

    # Train and save the model
    train_and_save_model(X_train_scaled, y_train)

    # Predict for a new value
    predicted_cost = load_model_and_predict(value, scaler=scaler)
